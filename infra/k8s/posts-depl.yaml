apiVersion: apps/v1
kind: Deployment
metadata:
  name: posts-depl
spec:
  replicas: 1
  selector: #sayesinde olusuturlan podlara göz atıyor app:posts key value'suna sahıpleri bulup onları deployment olarak yonetiyor.
    matchLabels:
      app: posts
  template: #burada ise deploymentın olsutmrasını istedigimiz bir podun tam yapılandırmasını  belırttıgımız sablon yer alır yanı aslında burası pod'a key value'yu app:posts'tu atıyor. yani pod'un app:posts etıketıne sahıp olmasını ıstedıgımızı soyluyoruz
    metadata:
      labels:
        app: posts
    spec:
      containers:
        - name: posts
          image: nurettinsenbackend/posts #  gine bu dosyada bır degısıklık gorurgormez en guncel olarak uzak repodan ceker  ayrıca 0.0.5 seklınde surum belırtmeyı cok yapmamaya calıs  stephengrider/posts bu sekılde latest tag kulllanmanı saglar. uzaktakı repodakı en son degısıklıgı alabılmek ıcın apply -f seklınde yaparsak dıcekkı yaml dosyanda bu degısıklık yok ben yapmam dıcek. dolayısıyla şu komutu kullan.
          # kubectl rollout restart deployment post-depl bunu neden kullanırız bız zaten deployment objesı kullanıyoruz onun ıcın bu komut daha saglıklı apply -f demek yerıne bu mantıklı yanı en sonda rollout da kullanmayıp skaffold kullandık.

# her bir deployment objemız ıcın birbirleriyle konusması ıcın kendılerıne aıt clusterIp servisi yaratalım
---
apiVersion: v1
kind: Service
metadata:
  name: posts-clusterip-srv
spec:
  selector:
    app: posts    # key valuesu app post olan poda ait oluyor clusterIp
  ports:
    - name: posts
      protocol: TCP
      port: 4000
      targetPort: 4000
