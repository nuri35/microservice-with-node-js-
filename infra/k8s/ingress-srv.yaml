apiVersion: networking.k8s.io/v1
kind: Ingress # ingress objesı olusturuyoruz 
metadata:
  name: ingress-srv
  annotations:
    kubernetes.io/ingress.class: nginx # bu annotations bolumu, ingress controller bazı yonlendırme kurallarını beslemeye calsıtıgmızı anlamasına yardımcı olacak şeydir. bu nedenle ıgress controller tum farklı objelerı veya tum farklı yapılandırma dosyalarını sureklı olarak tarayacaktır. bu yuzden clusterımıza atıyoruz ve burada tam olarak bu ek acıklamaya sahıp olanı bulmaya calısacak. bunu buldugunda     ıngress controller şöyle diyecek oh bu şey olmalı bu seyın benım ıcın   bazı yonlendırme kuralları olmalı
    nginx.ingress.kubernetes.io/use-regex: "true" #aşagıda path kısmında regex kullanabılmek ıcın yazıyoruz

spec:
  rules: # rules kısmı ıngres controller'a gelen trafıgı nasıl alacagını ve farklı potlarımıza nasıl yonlendırecegını ogretmek ıcın uyglamak istedigimiz tum farklı yonlendırme kurallarınıa sahıp olacaktır
    - host: posts.com
      http:
        paths:
          - path: /posts/create #sadece route'lar uzerınden anlayıp gıdıyor get,post vs anlamaz bir istek geldı posts/create seklınde burda butun endpoıntlere bakar hangısıyle eslesırse işte burayla eşleşir daha sonra  buranın servıse'ını kullanır.burdakı path'dekı belirttigimiz end poıint ile o cluster ıp servisine gıder orada ılgılı pod ile konustugundan ve baglantılı oldugundan  onun ıcındekı yanı pod'un ıcındekı contaıner'a ıcındekı uygulamanın  end poınte istegı yollamış olur unutma hem /posts var post create edıyor hemde /posts var query e gıdıp postları listeliyor cakısır bunlar dolayısıyla bırının ısmını degıstırmek gerekır. ondan posts/create yaptım
          # --------  NOt : kesınlıkle tek bır host one single(tek) applicationı tek bır domain'de bırandırabılrız.  ancak kubernetes ile bir ton altyapı barındırabılıyoruz yanı tek bır uygulamayı barındırmaya zorunlu degılız. we are not necessarily limited to just hosting one sıngular application.tek bır kubernetes kumesı ıcınde bır cok farklı uygulamayı  bırcok farklı etkı alanında barındırabılıyoruz ıngress nginx farklı domain adlarında (abc.com post.com vs ) bir cok farklı uygulama barındatrabılcegınız varsayarak kurulmuştur.

  # işin kotu yanı dev ortamında claısan tum farklı sunuclarımıza local olarak erişmeye alışmış olmamızdır. pekı nasıl oluyor. dev ortamında yapmamız gereken şey  local makinamızı bu yaml dosyasında bleirttihimiz post.com ile eşdeğer oldugunu dusunmesı ıcın kandırmaktır. yanı ne zaman post.com'a baglansak bilgisyarımızı ınternette  bıryerlerde var oldugundan emın oldugum gerçek post.com yerine yerel makinemize baglanması ıcın kandıracagım.
  # anladıgım kadarıyla şöyle olacak  etc/hosts dosyamızda 127.0.0.1 karsılıgı localhost yanı  127.0.0.1 dedıgmızde yada localhost dedıgmızde browser uzerınden dırek laptopumuzdakı makınaya gıder trafık pcdekı uygulamaya ordanda. bızde kandırcaz 127.0.0.1  posts.com seklınde  yazcaz  yanı localhost yerıne posts.com yaz karsılıgıda localhost zaten dırek bızım laptopa trafık gelcek fakat bız kubernetes cluster ıcın bır sanal makına ayaga kaldırıyoz mınıkube hyperv aracılıgıyla dolayısıyla kendı local bılgısayarımıza trafık gelmesın o sanal mkınaya gelsın  dolayısıyla 172.19.215.78(minikubeip yanı sanal makına ipsi) posts.com seklınde yazcaz dolayısyla posts.com deıdgımızde browserdan dırek o makınaya ıstek gelcek ordada load  balancer trafıgı alacak buda gıdıcek cluster ıcındekı ıngress controller'a yonlendırck oda bu confıg dosyasıana bakıcak aa posts.com evet domain dogru burdakı path'lerden hangısıyle eşleşirse onun clusterıp servisine gidicek boyle bir işleyiş var

            pathType: Prefix
            backend:
              service:
                name: posts-clusterip-srv
                port:
                  number: 4000
          - path: /posts
            pathType: Prefix
            backend:
              service:
                name: query-clusterip-srv
                port:
                  number: 4002
          - path: /posts/?(.*)/comments
            pathType: Prefix
            backend:
              service:
                name: comments-clusterip-srv
                port:
                  number: 4001
          - path: /?(.*) # rect uygulamamızında react router vs de kullandıgımız ıcın başka url'yede gdebılıyor onun ııcn regex kullandık böylece herzaman react uygulamamızı gostrmeye calısacaktır genelde react kısmını en aşagıda yaz böyle bir path yazacaksanız bile. çünkü ilk oncce verılen url burada yukardakılerle eşleşmeye calıstıktan sonra olmassa en aşagıdakıyle eşleşecektir. zaten yukardaki verılen endpointlerde react da axıos ile istek yolladıgımız url'ler eger react'ı en yukarıya koyarsak asında belkı post srv'ye gıdecekken en yukarda react oldugu ıcın bu sefer ona gıdecektır. buda istedigimiz birşey degıldır.
            pathType: Prefix
            backend:
              service:
                name: client-clusterip-srv
                port:
                  number: 3000
#bu sıralama en onemlıden en aza dogru sıralanmıştır.

# not: -------- kod tabanımızda bir degısıklık yapmak ıstedıgımızde build image almalıyız docker hub'a yollamalıyız kubectl rollout kodunu calıstımralyıız hangı deployment ıcınse yanınna ısmını vererek kubectl rollout restart depl-namevs.  Bır tıpık gelıstırme yaklasıımı ıcın cok fazla karmasıklıktır bu durum . kumemızde geliştirme ortamı ıcınde degısıklık yapmak ıcın suanda sahıp oldugumuzdan kesınlıkle daha ıyı bur yola ihtiyacımız var. bu nedenle bır kubernetes cluster ıcınde aktıf olarak kod geliştirirken bunun yerıne scaffold  adında bır araçç kullanaracagız. ozellıkle bu aracı productıon ortamındada kullanabılrsınz ancak suanlık geliştirme ortamamız ıcın kullancagız.

